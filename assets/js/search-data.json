{
  
    
        "post0": {
            "title": "Title",
            "content": "# PyPI from bs4 import BeautifulSoup as BS import requests # Standard import pprint import json import re . # main_url = &#39;https://dph.illinois.gov/regionmetrics?regionID=8#&#39; # page = requests.get(main_url) # soup = BS(page.content, &#39;html.parser&#39;) # pprint.pprint(soup) . query_url = &#39;https://idph.illinois.gov/DPHPublicInformation/api/COVID/GetResurgenceData?regionID=8&amp;daysIncluded=7&#39; #+ selectedRegion + &#39;&amp;daysIncluded=&#39; + chartRange page = requests.get(query_url) # pprint.pprint(page.json()) print(&#39;&#39;&#39; - CLI ADMISSIONS -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;CLIAdmissions&#39;]) print(&#39;&#39;&#39; - COUNTRY TEST POSITIVITY REPORTS -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;CountyTestPositivityReports&#39;]) print(&#39;&#39;&#39; - HOSPITAL AVAILABILITY -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;HospitalAvailability&#39;]) print(&#39;&#39;&#39; - HOSPITAL BEDS IN USE AVG -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;HospitalBedsInUseAvg&#39;]) print(&#39;&#39;&#39; - TEST POSITIVITY -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;TestPositivity&#39;]) print(&#39;&#39;&#39; - LAST UPDATED DATE -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;lastUpdatedDate&#39;]) print(&#39;&#39;&#39; - REGION METRICS -&#39;&#39;&#39;) pprint.pprint(page.json()[&#39;regionMetrics&#39;]) . - CLI ADMISSIONS - [{&#39;CLIAdmissionsRA&#39;: 53.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-14T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 55.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-15T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 58.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-16T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 58.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-17T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 60.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-18T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 56.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-19T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 58.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-20T00:00:00&#39;}, {&#39;CLIAdmissionsRA&#39;: 57.0, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;}] - COUNTRY TEST POSITIVITY REPORTS - [{&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 695, &#39;positivityRollingAvg&#39;: 14.6, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 4973}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 458, &#39;positivityRollingAvg&#39;: 18.0, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 2570}], &#39;reportDate&#39;: &#39;2020-11-14T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 699, &#39;positivityRollingAvg&#39;: 14.1, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5628}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 457, &#39;positivityRollingAvg&#39;: 17.5, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 2673}], &#39;reportDate&#39;: &#39;2020-11-15T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 756, &#39;positivityRollingAvg&#39;: 13.9, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5619}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 430, &#39;positivityRollingAvg&#39;: 17.2, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3034}], &#39;reportDate&#39;: &#39;2020-11-16T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 695, &#39;positivityRollingAvg&#39;: 13.5, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5626}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 458, &#39;positivityRollingAvg&#39;: 16.7, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3236}], &#39;reportDate&#39;: &#39;2020-11-17T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 817, &#39;positivityRollingAvg&#39;: 13.5, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 6029}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 639, &#39;positivityRollingAvg&#39;: 17.1, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3143}], &#39;reportDate&#39;: &#39;2020-11-18T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 747, &#39;positivityRollingAvg&#39;: 13.5, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5344}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 550, &#39;positivityRollingAvg&#39;: 16.4, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3792}], &#39;reportDate&#39;: &#39;2020-11-19T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 739, &#39;positivityRollingAvg&#39;: 13.2, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5755}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 706, &#39;positivityRollingAvg&#39;: 16.7, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3646}], &#39;reportDate&#39;: &#39;2020-11-20T00:00:00&#39;}, {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 629, &#39;positivityRollingAvg&#39;: 13.1, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 4822}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 486, &#39;positivityRollingAvg&#39;: 17.0, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 2367}], &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;}] - HOSPITAL AVAILABILITY - [{&#39;AverageICUAvailPct&#39;: 0.342614075, &#39;AverageMedSurgAvailPct&#39;: 0.242350061, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-16T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.334880123, &#39;AverageMedSurgAvailPct&#39;: 0.233566433, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-17T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.319412219, &#39;AverageMedSurgAvailPct&#39;: 0.219192448, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-18T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.263681592, &#39;AverageMedSurgAvailPct&#39;: 0.185337874, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-19T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.226988382, &#39;AverageMedSurgAvailPct&#39;: 0.1687523, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-20T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.184731385, &#39;AverageMedSurgAvailPct&#39;: 0.158102766, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.193577981, &#39;AverageMedSurgAvailPct&#39;: 0.170983483, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-22T00:00:00&#39;}, {&#39;AverageICUAvailPct&#39;: 0.19266055, &#39;AverageMedSurgAvailPct&#39;: 0.166102968, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-23T00:00:00&#39;}] - HOSPITAL BEDS IN USE AVG - [{&#39;COVIDHospitalBedsInUseAvg&#39;: 675, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-16T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 683, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-17T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 692, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-18T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 700, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-19T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 706, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-20T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 711, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 716, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-22T00:00:00&#39;}, {&#39;COVIDHospitalBedsInUseAvg&#39;: 713, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-23T00:00:00&#39;}] - TEST POSITIVITY - [{&#39;positiveTests&#39;: 1153, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-14T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 15.8, &#39;totalTests&#39;: 7543}, {&#39;positiveTests&#39;: 1156, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-15T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 15.3, &#39;totalTests&#39;: 8301}, {&#39;positiveTests&#39;: 1186, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-16T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 15.1, &#39;totalTests&#39;: 8653}, {&#39;positiveTests&#39;: 1153, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-17T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 14.6, &#39;totalTests&#39;: 8862}, {&#39;positiveTests&#39;: 1456, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-18T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 14.8, &#39;totalTests&#39;: 9172}, {&#39;positiveTests&#39;: 1297, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-19T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 14.5, &#39;totalTests&#39;: 9136}, {&#39;positiveTests&#39;: 1445, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-20T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 14.5, &#39;totalTests&#39;: 9401}, {&#39;positiveTests&#39;: 1115, &#39;regionDescription&#39;: &#39;West Suburban&#39;, &#39;regionID&#39;: 8, &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 14.5, &#39;totalTests&#39;: 7189}] - LAST UPDATED DATE - {&#39;day&#39;: 24, &#39;month&#39;: 11, &#39;year&#39;: 2020} - REGION METRICS - [{&#39;CLIAdmissions_RollingAvg&#39;: 58.0, &#39;COVIDHospitalBedsInUse&#39;: 675.0, &#39;ICUAvailPct_Avg&#39;: &#39;34.26 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;24.24 %&#39;, &#39;PositiveTests&#39;: 1186, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-16T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 15.1, &#39;TotalTests&#39;: 8653}, {&#39;CLIAdmissions_RollingAvg&#39;: 58.0, &#39;COVIDHospitalBedsInUse&#39;: 683.0, &#39;ICUAvailPct_Avg&#39;: &#39;33.49 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;23.36 %&#39;, &#39;PositiveTests&#39;: 1153, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-17T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 14.6, &#39;TotalTests&#39;: 8862}, {&#39;CLIAdmissions_RollingAvg&#39;: 60.0, &#39;COVIDHospitalBedsInUse&#39;: 692.0, &#39;ICUAvailPct_Avg&#39;: &#39;31.94 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;21.92 %&#39;, &#39;PositiveTests&#39;: 1456, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-18T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 14.8, &#39;TotalTests&#39;: 9172}, {&#39;CLIAdmissions_RollingAvg&#39;: 56.0, &#39;COVIDHospitalBedsInUse&#39;: 700.0, &#39;ICUAvailPct_Avg&#39;: &#39;26.37 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;18.53 %&#39;, &#39;PositiveTests&#39;: 1297, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-19T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 14.5, &#39;TotalTests&#39;: 9136}, {&#39;CLIAdmissions_RollingAvg&#39;: 58.0, &#39;COVIDHospitalBedsInUse&#39;: 706.0, &#39;ICUAvailPct_Avg&#39;: &#39;22.70 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;16.88 %&#39;, &#39;PositiveTests&#39;: 1445, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-20T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 14.5, &#39;TotalTests&#39;: 9401}, {&#39;CLIAdmissions_RollingAvg&#39;: 57.0, &#39;COVIDHospitalBedsInUse&#39;: 711.0, &#39;ICUAvailPct_Avg&#39;: &#39;18.47 %&#39;, &#39;MedSurgAvailPct_Avg&#39;: &#39;15.81 %&#39;, &#39;PositiveTests&#39;: 1115, &#39;RegionDescription&#39;: &#39;West Suburban&#39;, &#39;RegionID&#39;: 8, &#39;ReportDate&#39;: &#39;2020-11-21T00:00:00&#39;, &#39;TestPositivity_RollingAvg&#39;: 14.5, &#39;TotalTests&#39;: 7189}] . print(&#39;&#39;&#39; - COUNTY TEST POSITIVITY REPORTS -&#39;&#39;&#39;) #pprint.pprint(page.json()[&#39;CountyTestPositivityReports&#39;]) query_url = &#39;https://idph.illinois.gov/DPHPublicInformation/api/COVID/GetResurgenceData?regionID=8&amp;daysIncluded=20&#39; #+ selectedRegion + &#39;&amp;daysIncluded=&#39; + chartRange page = requests.get(query_url) positivity_rates = page.json()[&#39;CountyTestPositivityReports&#39;] print(&#39;SINGLE SAMPLE&#39;) pprint.pprint(positivity_rates[0]) print() print(&#39;+--+&#39;) print(&#39;| DATE | NAME | POS | TOTAL | AVG | 7 DAY |&#39;) print(&#39;|--|&#39;) for counties in positivity_rates: print_date = True for i in counties[&#39;countyTestPositivities&#39;]: date = counties[&#39;reportDate&#39;][:10] if print_date else (&#39; &#39;*10) name = i[&#39;CountyName&#39;] name_fill = &#39; &#39;*(10 - len(name)) positive = i[&#39;positive_test&#39;] positive_fill = &#39; &#39;*(6 - len(str(positive))) total = i[&#39;totalTest&#39;] total_fill = &#39; &#39;*(6 - len(str(total))) daily_avg = round(float(i[&#39;positive_test&#39;]/i[&#39;totalTest&#39;]*100), 1) # positive tests / total tests * 100, then rounded to 1 decimal place daily_avg_fill = &#39; &#39; *(5 - len(str(daily_avg))) seven_day_avg = i[&#39;positivityRollingAvg&#39;] seven_fill = &#39; &#39;*(5 - len(str(seven_day_avg))) print(f&#39;| {date} | {name}{name_fill} | {positive}{positive_fill} | {total}{total_fill} | {daily_avg}{daily_avg_fill} | {seven_day_avg}{seven_fill} |&#39;) print_date = False # print(&#39;|&#39;, # i[&#39;reportDate&#39;][:10], &#39;|&#39;, i[0][&#39;positiveTests&#39;], &#39;|&#39;, i[&#39;totalTests&#39;], &#39; |&#39;, round(float(i[&#39;positiveTests&#39;])/float(i[&#39;totalTests&#39;])*100, 1), &#39;|&#39;, i[&#39;testPositivityRollingAvg&#39;], # &#39;|&#39;) print(&#39;+--+&#39;) # sum1 = [x[&#39;countyTestPositivities&#39;][0][&#39;dailyPositivity&#39;] for x in positivity_rates] # print(sum1) . - COUNTRY TEST POSITIVITY REPORTS - SINGLE SAMPLE {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 561, &#39;positivityRollingAvg&#39;: 11.2, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 4225}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 287, &#39;positivityRollingAvg&#39;: 13.6, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 1803}], &#39;reportDate&#39;: &#39;2020-11-01T00:00:00&#39;} +--+ | DATE | NAME | POS | TOTAL | AVG | 7 DAY | |--| | 2020-11-01 | DuPage | 561 | 4225 | 13.3 | 11.2 | | | Kane | 287 | 1803 | 15.9 | 13.6 | | 2020-11-02 | DuPage | 473 | 4521 | 10.5 | 11.2 | | | Kane | 444 | 2985 | 14.9 | 14.0 | | 2020-11-03 | DuPage | 551 | 3513 | 15.7 | 11.7 | | | Kane | 389 | 2554 | 15.2 | 14.6 | | 2020-11-04 | DuPage | 468 | 4335 | 10.8 | 11.7 | | | Kane | 381 | 2401 | 15.9 | 15.0 | | 2020-11-05 | DuPage | 573 | 4810 | 11.9 | 11.9 | | | Kane | 474 | 2816 | 16.8 | 15.6 | | 2020-11-06 | DuPage | 782 | 5917 | 13.2 | 12.4 | | | Kane | 654 | 3895 | 16.8 | 16.0 | | 2020-11-07 | DuPage | 792 | 5514 | 14.4 | 12.8 | | | Kane | 588 | 2815 | 20.9 | 16.7 | | 2020-11-08 | DuPage | 722 | 4514 | 16.0 | 13.2 | | | Kane | 426 | 1981 | 21.5 | 17.3 | | 2020-11-09 | DuPage | 830 | 5588 | 14.9 | 13.8 | | | Kane | 507 | 3118 | 16.3 | 17.5 | | 2020-11-10 | DuPage | 813 | 5433 | 15.0 | 13.8 | | | Kane | 612 | 3456 | 17.7 | 17.8 | | 2020-11-11 | DuPage | 709 | 5286 | 13.4 | 14.1 | | | Kane | 566 | 3219 | 17.6 | 18.0 | | 2020-11-12 | DuPage | 718 | 5126 | 14.0 | 14.4 | | | Kane | 522 | 2714 | 19.2 | 18.3 | | 2020-11-13 | DuPage | 904 | 6035 | 15.0 | 14.6 | | | Kane | 593 | 3465 | 17.1 | 18.4 | | 2020-11-14 | DuPage | 695 | 4973 | 14.0 | 14.6 | | | Kane | 458 | 2570 | 17.8 | 18.0 | | 2020-11-15 | DuPage | 699 | 5628 | 12.4 | 14.1 | | | Kane | 457 | 2673 | 17.1 | 17.5 | | 2020-11-16 | DuPage | 756 | 5619 | 13.5 | 13.9 | | | Kane | 430 | 3034 | 14.2 | 17.2 | | 2020-11-17 | DuPage | 695 | 5626 | 12.4 | 13.5 | | | Kane | 458 | 3236 | 14.2 | 16.7 | | 2020-11-18 | DuPage | 817 | 6029 | 13.6 | 13.5 | | | Kane | 639 | 3143 | 20.3 | 17.1 | | 2020-11-19 | DuPage | 747 | 5344 | 14.0 | 13.5 | | | Kane | 550 | 3792 | 14.5 | 16.4 | | 2020-11-20 | DuPage | 739 | 5755 | 12.8 | 13.2 | | | Kane | 706 | 3646 | 19.4 | 16.7 | | 2020-11-21 | DuPage | 629 | 4822 | 13.0 | 13.1 | | | Kane | 486 | 2367 | 20.5 | 17.0 | +--+ . import datetime from datetime import date # TABLE PARAMETERS line_length = 59 print(&#39;&#39;&#39; - COUNTY TEST POSITIVITY REPORTS -&#39;&#39;&#39;) #pprint.pprint(page.json()[&#39;CountyTestPositivityReports&#39;]) query_url = &#39;https://idph.illinois.gov/DPHPublicInformation/api/COVID/GetResurgenceData?regionID=8&amp;daysIncluded=20&#39; #+ selectedRegion + &#39;&amp;daysIncluded=&#39; + chartRange page = requests.get(query_url) positivity_rates = page.json()[&#39;CountyTestPositivityReports&#39;] print(&#39;SINGLE SAMPLE&#39;) pprint.pprint(positivity_rates[-1]) behind = datetime.datetime.strptime(positivity_rates[-1][&#39;reportDate&#39;], &quot;%Y-%m-%dT%H:%M:%S&quot;) behind_str = f&#39;CURRENT DATE: {date.today()} (Report is {(date.today() - behind.date()).days} days *behind*)&#39; behind_fill = &#39; &#39;*(57 - len(behind_str)) print() print(f&#39;+{&quot;=&quot;*line_length}+&#39;) print(f&#39;| {behind_str}{behind_fill} |&#39;) print(f&#39;|{&quot;=&quot;*line_length}|&#39;) print(&#39;| NAME | DATE | POS | TOTAL | AVG | 7 DAY |&#39;) print(f&#39;|{&quot;-&quot;*line_length}|&#39;) number_of_counties = len(positivity_rates[0][&#39;countyTestPositivities&#39;]) for n in range(number_of_counties): print_name = True for counties in positivity_rates: county = counties[&#39;countyTestPositivities&#39;][n]#[n-1] date = counties[&#39;reportDate&#39;][:10] name = county[&#39;CountyName&#39;] if print_name == True else &#39;&#39; name_fill = &#39; &#39;*(10 - len(name)) positive = county[&#39;positive_test&#39;] positive_fill = &#39; &#39;*(6 - len(str(positive))) total = county[&#39;totalTest&#39;] total_fill = &#39; &#39;*(6 - len(str(total))) daily_avg = round(float(county[&#39;positive_test&#39;]/county[&#39;totalTest&#39;]*100), 1) # positive tests / total tests * 100, then rounded to 1 decimal place daily_avg_fill = &#39; &#39; *(5 - len(str(daily_avg))) seven_day_avg = county[&#39;positivityRollingAvg&#39;] seven_fill = &#39; &#39;*(5 - len(str(seven_day_avg))) print(f&#39;| {name}{name_fill} | {date} | {positive}{positive_fill} | {total}{total_fill} | {daily_avg}{daily_avg_fill} | {seven_day_avg}{seven_fill} |&#39;) print_name = False print(f&#39;+{&quot;-&quot;*line_length}+&#39;) # sum1 = [x[&#39;countyTestPositivities&#39;][0][&#39;dailyPositivity&#39;] for x in positivity_rates] # print(sum1) . - COUNTY TEST POSITIVITY REPORTS - SINGLE SAMPLE {&#39;countyTestPositivities&#39;: [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 629, &#39;positivityRollingAvg&#39;: 13.1, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 4822}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 486, &#39;positivityRollingAvg&#39;: 17.0, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 2367}], &#39;reportDate&#39;: &#39;2020-11-21T00:00:00&#39;} +===========================================================+ | CURRENT DATE: 2020-11-24 (Report is 3 days *behind*) | |===========================================================| | NAME | DATE | POS | TOTAL | AVG | 7 DAY | |--| | DuPage | 2020-11-01 | 561 | 4225 | 13.3 | 11.2 | | | 2020-11-02 | 473 | 4521 | 10.5 | 11.2 | | | 2020-11-03 | 551 | 3513 | 15.7 | 11.7 | | | 2020-11-04 | 468 | 4335 | 10.8 | 11.7 | | | 2020-11-05 | 573 | 4810 | 11.9 | 11.9 | | | 2020-11-06 | 782 | 5917 | 13.2 | 12.4 | | | 2020-11-07 | 792 | 5514 | 14.4 | 12.8 | | | 2020-11-08 | 722 | 4514 | 16.0 | 13.2 | | | 2020-11-09 | 830 | 5588 | 14.9 | 13.8 | | | 2020-11-10 | 813 | 5433 | 15.0 | 13.8 | | | 2020-11-11 | 709 | 5286 | 13.4 | 14.1 | | | 2020-11-12 | 718 | 5126 | 14.0 | 14.4 | | | 2020-11-13 | 904 | 6035 | 15.0 | 14.6 | | | 2020-11-14 | 695 | 4973 | 14.0 | 14.6 | | | 2020-11-15 | 699 | 5628 | 12.4 | 14.1 | | | 2020-11-16 | 756 | 5619 | 13.5 | 13.9 | | | 2020-11-17 | 695 | 5626 | 12.4 | 13.5 | | | 2020-11-18 | 817 | 6029 | 13.6 | 13.5 | | | 2020-11-19 | 747 | 5344 | 14.0 | 13.5 | | | 2020-11-20 | 739 | 5755 | 12.8 | 13.2 | | | 2020-11-21 | 629 | 4822 | 13.0 | 13.1 | +--+ | Kane | 2020-11-01 | 287 | 1803 | 15.9 | 13.6 | | | 2020-11-02 | 444 | 2985 | 14.9 | 14.0 | | | 2020-11-03 | 389 | 2554 | 15.2 | 14.6 | | | 2020-11-04 | 381 | 2401 | 15.9 | 15.0 | | | 2020-11-05 | 474 | 2816 | 16.8 | 15.6 | | | 2020-11-06 | 654 | 3895 | 16.8 | 16.0 | | | 2020-11-07 | 588 | 2815 | 20.9 | 16.7 | | | 2020-11-08 | 426 | 1981 | 21.5 | 17.3 | | | 2020-11-09 | 507 | 3118 | 16.3 | 17.5 | | | 2020-11-10 | 612 | 3456 | 17.7 | 17.8 | | | 2020-11-11 | 566 | 3219 | 17.6 | 18.0 | | | 2020-11-12 | 522 | 2714 | 19.2 | 18.3 | | | 2020-11-13 | 593 | 3465 | 17.1 | 18.4 | | | 2020-11-14 | 458 | 2570 | 17.8 | 18.0 | | | 2020-11-15 | 457 | 2673 | 17.1 | 17.5 | | | 2020-11-16 | 430 | 3034 | 14.2 | 17.2 | | | 2020-11-17 | 458 | 3236 | 14.2 | 16.7 | | | 2020-11-18 | 639 | 3143 | 20.3 | 17.1 | | | 2020-11-19 | 550 | 3792 | 14.5 | 16.4 | | | 2020-11-20 | 706 | 3646 | 19.4 | 16.7 | | | 2020-11-21 | 486 | 2367 | 20.5 | 17.0 | +--+ . import numpy as np import pandas as pd import matplotlib.pyplot as plt query_url = &#39;https://idph.illinois.gov/DPHPublicInformation/api/COVID/GetResurgenceData?regionID=8&amp;daysIncluded=50&#39; #+ selectedRegion + &#39;&amp;daysIncluded=&#39; + chartRange page = requests.get(query_url) positivity_rates = page.json()[&#39;CountyTestPositivityReports&#39;] flattened_positivity_rates = [] for dates in positivity_rates: for county in dates[&#39;countyTestPositivities&#39;]: county[&#39;date&#39;] = datetime.datetime.strptime(dates[&#39;reportDate&#39;], &quot;%Y-%m-%dT%H:%M:%S&quot;) flattened_positivity_rates.append(county) county_test_pos_rates_df = pd.DataFrame(flattened_positivity_rates) county_test_pos_rates_df[&#39;daily_avg&#39;] = (county_test_pos_rates_df[&#39;positive_test&#39;] / county_test_pos_rates_df[&#39;totalTest&#39;]) * 100 #display(HTML(county_test_pos_rates_df.to_html())) county_test_pos_rates_df.plot(y=[&#39;daily_avg&#39;, &#39;positivityRollingAvg&#39;], x=&#39;date&#39;) . &lt;AxesSubplot:xlabel=&#39;date&#39;&gt; . data_df2 = pd.DataFrame(positivity_rates[0]) data_df2 . reportDate countyTestPositivities . 0 2020-11-16T00:00:00 | {&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;totalTest&#39;: 5619, &#39;p... | . 1 2020-11-16T00:00:00 | {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;totalTest&#39;: 3034, &#39;pos... | . pprint.pprint(data_df[&#39;countyTestPositivities&#39;][0]) smaller_df = pd.DataFrame(data_df[&#39;countyTestPositivities&#39;][0]) smaller_df . [{&#39;CountyName&#39;: &#39;DuPage&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 756, &#39;positivityRollingAvg&#39;: 13.9, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 5619}, {&#39;CountyName&#39;: &#39;Kane&#39;, &#39;dailyPositivity&#39;: 0.0, &#39;positive_test&#39;: 430, &#39;positivityRollingAvg&#39;: 17.2, &#39;regionID&#39;: 8, &#39;totalTest&#39;: 3034}] . CountyName totalTest positive_test positivityRollingAvg dailyPositivity regionID . 0 DuPage | 5619 | 756 | 13.9 | 0.0 | 8 | . 1 Kane | 3034 | 430 | 17.2 | 0.0 | 8 | . len(&#39;Date: 2020-11-24 (Report is 3 days *behind*) &#39;) . 65 . len(&#39;--&#39;) . 59 . print(&#39;&#39;&#39; -- REGION TEST POSITIVITY REPORT --&#39;&#39;&#39;) #pprint.pprint(page.json()[&#39;CountyTestPositivityReports&#39;]) query_url = &#39;https://idph.illinois.gov/DPHPublicInformation/api/COVID/GetResurgenceData?regionID=7&amp;daysIncluded=7&#39; #+ selectedRegion + &#39;&amp;daysIncluded=&#39; + chartRange page = requests.get(query_url) positivity_rates = page.json()[&#39;TestPositivity&#39;] print(&#39;SINGLE SAMPLE&#39;) pprint.pprint(positivity_rates[0]) print() print(&#39;+--+&#39;) print(&#39;| DATE | POS | TOTAL | AVG | 7 DAY |&#39;) print(&#39;|--|&#39;) for i in positivity_rates: print(&#39;|&#39;, i[&#39;reportDate&#39;][:10], &#39;|&#39;, i[&#39;positiveTests&#39;], &#39;|&#39;, i[&#39;totalTests&#39;], &#39; |&#39;, round(float(i[&#39;positiveTests&#39;])/float(i[&#39;totalTests&#39;])*100, 1), &#39;|&#39;, i[&#39;testPositivityRollingAvg&#39;], &#39;|&#39;) print(&#39;+--+&#39;) # sum1 = [x[&#39;countyTestPositivities&#39;][0][&#39;dailyPositivity&#39;] for x in positivity_rates] # print(sum1) . -- REGION TEST POSITIVITY REPORT -- SINGLE SAMPLE {&#39;positiveTests&#39;: 1164, &#39;regionDescription&#39;: &#39;South Suburban&#39;, &#39;regionID&#39;: 7, &#39;reportDate&#39;: &#39;2020-11-14T00:00:00&#39;, &#39;testPositivityRollingAvg&#39;: 20.3, &#39;totalTests&#39;: 4604} +--+ | DATE | POS | TOTAL | AVG | 7 DAY | |--| | 2020-11-14 | 1164 | 4604 | 25.3 | 20.3 | | 2020-11-15 | 1087 | 5201 | 20.9 | 20.7 | | 2020-11-16 | 980 | 4958 | 19.8 | 20.7 | | 2020-11-17 | 832 | 4734 | 17.6 | 20.6 | | 2020-11-18 | 974 | 5756 | 16.9 | 20.1 | | 2020-11-19 | 1011 | 5310 | 19.0 | 19.8 | | 2020-11-20 | 1086 | 6667 | 16.3 | 19.2 | | 2020-11-21 | 889 | 4356 | 20.4 | 18.5 | +--+ .",
            "url": "/2020/11/23/idh_region_8.html",
            "relUrl": "/2020/11/23/idh_region_8.html",
            "date": " • Nov 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Tranforming and Flattening Data",
            "content": "The Situation . A while back I had a the need to take what were essentially audit logs, where multiple records existed for each id, and flatten then into a single record for each id. . I pulled the data into python from a database as a list of over 100,000 tuples. Here is an example of the data I was looking at. . csv (audit_record.csv) RECORD,ID,OLD_VALUE,FINAL_VALUE,DATE,TABLE,COLUMN 1, id1, value1, value2, 02/01/2020, table1, column1 2, id1, value2, value3, 02/02/2020, table1, column1 3, id1, value3, value1, 02/03/2020, table1, column1 4, id2, value4, value5, 02/01/2020, table1, column1 5, id2, value5, , 02/03/2020, table1, column1 6, id3, value6, value7, 02/01/2020, table1, column1 7, id3, value8, value9, 02/02/2020, table1, column1 8, id4, value10, value11, 02/01/2020, table1, column1 9, id4, value11, value12, 02/02/2020, table1, column1 10,id4, value12, value4, 02/03/2020, table1, column1 . The Problem . This was an audit log for a series of undesired changes. Here is an example of the progression of these changes: . 02/01/2020: a large number of records were changed and iterated to the next highest available number | 02/02/2020: a similar number of records (but not all) were changed again, again iterating to the next available number | 02/03/2020: an additional event took place that resulted in many of the records being corrected (returning to their previous numbers), but some ended at yet another iteration higher, while still others ended up missing a value altogether. | . In the sample information above there are 4 different unintended transformations of data that occurred: . id1: Example series of changes that ended back at the correct value: . 02/01: value1 =&gt; value2 | 02/02: value2 =&gt; value3 | 02/03: value3 =&gt; value1 . id2: Example of series of changes that ended with a complete removal of the value: . 02/01: value4 =&gt; value5 | 02/02: No Changes | 02/03: value5 =&gt; null . id3: Example of series of changes that ended at a different number: . 02/01: value6 =&gt; value7 | 02/02: value7 =&gt; value8 | 02/03: No Changes . id4: Example of series of changes that ended up a different id&#39;s value (data not only incorrect, but conflicting): . 02/01: value10 =&gt; value11 | 02/02: value11 =&gt; value12 | 02/03: value12 =&gt; value4 . Details . In addition to the obvious differences between these 4 different changes, there are some that are harder to see: . Some id records went through 3 changes, others went through 2 (this one is not hard to see) | The last change of some id records was on 02/02, while others&#39; last change was on 02/03 | . Altogether, the different factors that need to be understood are the following: . Some records changed each of the 3 days, some only on 2 | Some of the records that only changed 2 times had their final changed on day 2, while others skipped day 2 and had their final change on day 3 | Some records eventually were self corrected to their original value | Some records iterated 2 times and ended at a different number | Some records eventually ended up with a final value of null | Some records ended up at the original value of a different id | . This example, as messy as it is, also is cleaner that the situation itself. The follow challenges existed: . There were some that only had 1 audit record where the original value was immediately replaced with a null | The list of tuples was not sorted in any fashion | The dates were actually spread over a period of 14 or 15 days, with the changes for a single record following anywhere in that time period -- not a clean 3 days like the example here. | . The tuples that represent the audits for these changes are all over the place. In the end, what I wanted to see clearly what I was dealing with. In order to do that I needed to have a list of new records that would clearly show me the following for each id: . original value, and the date that value was lost | final value, and the date that value was added | . The Solution . Gather the change associated with a single id together, identified by that id: | . import csv from collections import defaultdict reader = csv.DictReader(open(&#39;2020-06-08/audit_record.csv&#39;)) dict_by_user = defaultdict(list) for i in reader: dict_by_user[i[&#39;ID&#39;]].append(i) . The results in dcit_by_user are the following data structure (python dictionary) | . dict_by_user = { &#39;id1&#39;: [[&#39;id1&#39;, &#39;value1&#39;, &#39;value2&#39;, &#39;02/01/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id1&#39;, &#39;value2&#39;, &#39;value3&#39;, &#39;02/02/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id1&#39;, &#39;value3&#39;, &#39;value1&#39;, &#39;02/03/2020&#39;, &#39;table1&#39;, &#39;column1&#39;]], &#39;id2&#39;: [[&#39;id2&#39;, &#39;value4&#39;, &#39;value5&#39;, &#39;02/01/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id2&#39;, &#39;value5&#39;, &#39;&#39;, &#39;02/03/2020,&#39; &#39;table1&#39;, &#39;column1&#39;]], &#39;id3&#39;: [[&#39;id3&#39;, &#39;value6&#39;, &#39;value7&#39;, &#39;02/01/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id3&#39;, &#39;value8&#39;, &#39;value9&#39;, &#39;02/02/2020&#39;, &#39;table1&#39;, &#39;column1&#39;]], &#39;id4&#39;: [[&#39;id4&#39;, &#39;value10&#39;,&#39;value11&#39;, &#39;02/01/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id4&#39;, &#39;value11&#39;,&#39;value12&#39;, &#39;02/02/2020&#39;, &#39;table1&#39;, &#39;column1&#39;], [&#39;id4&#39;, &#39;value12&#39;,&#39;value4&#39;, &#39;02/03/2020&#39;, &#39;table1&#39;, &#39;column1&#39;]] } . NOTE: The actual end result of a defaultdict. The more accurate representation of what the data looks like can be seen by expanding the result right below here. | . #collapse-hide dict_by_user = defaultdict(&lt;class &#39;list&#39;&gt;, {&#39; id1&#39;: [OrderedDict([(&#39;RECORD&#39;, &#39;1&#39;), (&#39;ID&#39;, &#39; id1&#39;), (&#39;OLD_VALUE&#39;, &#39;value1&#39;), (&#39;FINAL_VALUE&#39;, &#39;value2&#39;), (&#39;DATE&#39;, &#39;02/01/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;)]), OrderedDict([(&#39;RECORD&#39;, &#39;2&#39;), (&#39;ID&#39;, &#39; id1&#39;), (&#39;OLD_VALUE&#39;, &#39;value2&#39;), (&#39;FINAL_VALUE&#39;, &#39;value3&#39;), (&#39;DATE&#39;, &#39;02/02/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;)]), OrderedDict([(&#39;RECORD&#39;, &#39;3&#39;), (&#39;ID&#39;, &#39; id1&#39;), (&#39;OLD_VALUE&#39;, &#39;value1&#39;), (&#39;FINAL_VALUE&#39;, &#39;value1&#39;), (&#39;DATE&#39;, &#39;02/03/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;), (&#39;ORIGINAL_DATE&#39;, &#39;02/01/2020&#39;)])], &#39; id2&#39;: [OrderedDict([(&#39;RECORD&#39;, &#39;4&#39;), (&#39;ID&#39;, &#39; id2&#39;), (&#39;OLD_VALUE&#39;, &#39;value4&#39;), (&#39;FINAL_VALUE&#39;, &#39;value5&#39;), (&#39;DATE&#39;, &#39;02/01/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;)]), OrderedDict([(&#39;RECORD&#39;, &#39;5&#39;), (&#39;ID&#39;, &#39; id2&#39;), (&#39;OLD_VALUE&#39;, &#39;value4&#39;), (&#39;FINAL_VALUE&#39;, &#39;&#39;), (&#39;DATE&#39;, &#39;02/03/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;), (&#39;ORIGINAL_DATE&#39;, &#39;02/01/2020&#39;)])], &#39; id3&#39;: [OrderedDict([(&#39;RECORD&#39;, &#39;6&#39;), (&#39;ID&#39;, &#39; id3&#39;), (&#39;OLD_VALUE&#39;, &#39;value6&#39;), (&#39;FINAL_VALUE&#39;, &#39;value7&#39;), (&#39;DATE&#39;, &#39;02/01/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;)]), OrderedDict([(&#39;RECORD&#39;, &#39;7&#39;), (&#39;ID&#39;, &#39; id3&#39;), (&#39;OLD_VALUE&#39;, &#39;value6&#39;), (&#39;FINAL_VALUE&#39;, &#39;value9&#39;), (&#39;DATE&#39;, &#39;02/02/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;), (&#39;ORIGINAL_DATE&#39;, &#39;02/01/2020&#39;)])], &#39; id4&#39;: [OrderedDict([(&#39;RECORD&#39;, &#39;8&#39;), (&#39;ID&#39;, &#39; id4&#39;), (&#39;OLD_VALUE&#39;, &#39;value10&#39;), (&#39;FINAL_VALUE&#39;, &#39;value11&#39;), (&#39;DATE&#39;, &#39;02/01/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;)]), OrderedDict([(&#39;RECORD&#39;, &#39;9&#39;), (&#39;ID&#39;, &#39; id4&#39;), (&#39;OLD_VALUE&#39;, &#39;value10&#39;), (&#39;FINAL_VALUE&#39;, &#39;value12&#39;), (&#39;DATE&#39;, &#39;02/02/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;), (&#39;ORIGINAL_DATE&#39;, &#39;02/01/2020&#39;)])], &#39;id4&#39;: [OrderedDict([(&#39;RECORD&#39;, &#39;10&#39;), (&#39;ID&#39;, &#39;id4&#39;), (&#39;OLD_VALUE&#39;, &#39;value12&#39;), (&#39;FINAL_VALUE&#39;, &#39;value4&#39;), (&#39;DATE&#39;, &#39;02/03/2020&#39;), (&#39;TABLE&#39;, &#39; table1&#39;), (&#39;COLUMN&#39;, &#39; column1&#39;), (&#39;ORIGINAL_DATE&#39;, &#39;02/03/2020&#39;)])]}) . . dict_by_user is then passed into the next section: | . audit_summary_l = [] for i in dict_by_user: if dict_by_user: temp_dict = {} max = &#39;0&#39; min = &#39;99/99/9999&#39; for record in dict_by_user[i]: if record[&#39;DATE&#39;] &gt; max: max = record[&#39;DATE&#39;] last = record if record[&#39;DATE&#39;] &lt; min: min = record[&#39;DATE&#39;] first = record temp_dict = last temp_dict[&#39;OLD_VALUE&#39;] = first[&#39;OLD_VALUE&#39;] temp_dict[&#39;ORIGINAL_DATE&#39;] = first[&#39;DATE&#39;] audit_summary_l.append(temp_dict) columns = [&#39;ID&#39;,&#39;OLD_VALUE&#39;,&#39;ORIGINAL_DATE&#39;,&#39;FINAL_VALUE&#39;, &#39;DATE&#39;,&#39;TABLE&#39;,&#39;COLUMN&#39;,&#39;RECORD&#39;] with open(&#39;2020-06-08/audit_summary.csv&#39;, &#39;w&#39;) as output_file: dict_writer = csv.DictWriter(output_file, fieldnames=columns, lineterminator=&#39; n&#39;) dict_writer.writeheader() for data in audit_summary_l: dict_writer.writerow(data) . This results in the following csv data: | . csv ID,OLD_VALUE,ORIGINAL_DATE,FINAL_VALUE,DATE,TABLE,COLUMN,RECORD id1, value1, 02/01/2020, value1, 02/03/2020, table1,column1, 3 id2, value4, 02/01/2020, , 02/03/2020, table1,column1, 5 id3, value6, 02/01/2020, value9, 02/02/2020, table1,column1, 7 id4, value10, 02/01/2020, value4, 02/03/2020,table 1,column1, 10 .",
            "url": "/csv/defaultdict/2020/06/08/Transforming-and-Flattening-Data.html",
            "relUrl": "/csv/defaultdict/2020/06/08/Transforming-and-Flattening-Data.html",
            "date": " • Jun 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}